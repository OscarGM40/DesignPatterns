				PLAYLIST PATRONES DE DISEÑO BY KODOTI

Fuente: https://www.youtube.com/watch?v=Yk5TXytE-gs&list=PL9prAn3zOWZ4slyDs5y7VOxhb_Sc04ShD

En este curso veré que son los patrones de diseño y casos prácticos donde aplicarlos.Usaremos Typescript.

En el desarrollo de software es muy normal que en función de la complejidad del modelo de negocio se presenten problemas técnicos.
Para muchos de estos problemas ya existen soluciones planteadas,corroboradas y testeadas.Estas soluciones son los famosos patrones de diseño.

Los patrones de diseño son:
1- Una mejor forma de solucionar las cosas
2- Gran solución a N problemas
3- Estandarizan el trabajo(no soluciono las cosas a mi criterio único)
4- Los proyectos son más escalables al hacer uso de patrones de diseño
5- Ahorramos tiempo(el patrón ya está hecho,no tengo que inventar mi solución)
6- Evitamos reiventar la rueda

En este curso vamos a clasificar los patrones en tipos:

A- Patrones creacionales:buscan solucionar problemas de instanciar/creación de objetos.Dentro de estos patrones creacionales encontramos:singleton, abstract factory y factory method(hay muchos más).

B- Patrones estructurales: resuelven problemas de estructura, es decir como se relaciona una clase con otra clase.Como estructurales tenemos el adapter,el decorator y el proxy

C- Patrones de comportamiento: estos patrones me van a permitir una mejor propuesta a la forma en que se maneja la interacción y responsabilidades entre clases asi como los algoritmos implementados.
Dentro de los patrones de comportamiento tengo el command(muy común en estructuras de microservicios),el observer,strategy.

En la playlist el autor seguirá este orden,creacionales,estructurales y de comportamiento.

					VIDEO 02 PATRON CREACIONAL SINGLETON

El patrón Singleton pertenece a los patrones creacionales.Este patrón básicamente lo que hace es crear una sola instancia de una clase.
Muchas veces en nuestro aplicativo tendré lógica que se repite y no es necesario reinstanciar la clase
Siempre que llamemos a la clase no va a retornar una instancia nueva,sino que retornará esa instancia ya definida.

Veamos un ejemplo práctico.En todos los proyectos siempre hay parámetros de configuración,lo que puedo hacer es crear una clase singleton que la primera vez que se llame iniciará todos los parametros(configura la aplicación).
Sucesivas llamadas no realizará nada.

NOTA:fijate que usar Singleton tiene mejor performance ya que sólo reservaré un lugar en memoria máximo para una instancia.

Empezamos creando un config.json con esos datos de configuración:
{
  "environment": "development",
  "connectionString":"Server=myServerAddress;Database=myDataBase;UserId=myUsername;Password=myPassword;",
  "apiUrl":"https://api.kodoti.com"
}	

NOTA:la base de este patrón está en hacer referencia a si mismo.A su vez,creamos un constructor privado para que nunca sea accesible desde fuera de la clase.
Somos nosotros los que crearemos la instancia.Una vez se haya creado se devuelve siempre esa misma instancia.Veamoslo en código mejor:

PASO UNO: crear una propiedad del mismo tipo que la clase y un constructor privado vacío.

export default class MyConfiguration {
  private static instance: MyConfiguration; <- regla 1,crear propiedad del mismo tipo que la clase  
  private constructor(){} <- regla 2,constructor privado,solo accesible dentro de la clase,nunca podré crear una instancia desde fuera 

PASO DOS: creo las propiedades/métodos que necesite la clase,privadas,en este caso son estas:
  private static _connectionString:string;
  private static _environment:string;
  private static _apiUrl:string;

PASO TRES: dado que el constructor es "paja",no puedo usarlo,necesito un método que inicialize la instancia según exista previamente o no(devolviendola en este caso).Este método es muy conocido y se le llama getInstance por convención:

public static getInstance():MyConfiguration {
  if(!this.instance){
  this.instance= new MyConfiguration();
  this.initialize();
}
return this.instance; <- CLAVE!! fijate que getInstance siempre devuelve la misma instancia(si ya la hay va a pasar el if y la devuelve).

* El initialize luce asi(simplemente inicializa los valores):

private static initialize():void{
    this._connectionString = config.connectionString;
    this._environment = config.environment;
    this._apiUrl = config.apiUrl;
  }

PASO CUATRO: Por último falta crear los getters para que se pueda acceder en el initialize a los valores de las propiedades:

 get connectionString(): string {
    return MyConfiguration._connectionString;
  }
  get environment(): string {
    return MyConfiguration._environment;
  }
  get apiUrl(): string {
    return MyConfiguration._apiUrl;
  }
IMPORTANTE: recuerda que los patrones de diseño incrementan la calidad de mi código,me permiten acceder a la solución a un problema fácilmente y fueron diseñados pensando en la escalabilidad y flexibilidad.En grupos de trabajo ayuda a los otros dev a entender el código.

IMPORTANTE: fijate que el único método que deja público este patrón es el getInstance,que además debe ser static también.De esta forma esta clase sólo dejó acceso a getInstance que devolverá una y otra vez la misma instancia:

let config = MyConfiguration.getInstance() <- en cuanto quiera crear el singleton llamo al método.Lo puedo llamar cuantas veces quiera,que no va a crear otra instancia

Para llamar a las pruebas:
"test-singleton": "mocha -r ts-node/register creational/singleton/*.spec.ts", <- cambiar creational/singleton,ya que no tengo esa estructura de files.
!! <- last command entirely
!* <- all arguments from previous command
!$ <- lastargument from previous command
!^first argument <- fijate que coincide con las regexp

import { expect } from "chai";
import "mocha";

let config = MyConfiguration.getInstance();

describe('Pruebas en patrón creacional Singleton', () => { 

  it("object should be not null", () => {
    expect(MyConfiguration.getInstance()).to.not.be.null;
  })
  
  it('objects should share same memory address', () => {
    let config2 = MyConfiguration.getInstance();
    expect(config2).to.equal(config);
  })
  
  it('environment property should have value of development', () => {
    expect(config.environment).to.equal('development');
  })
  
 })
Puedo tratar de recordar que siempre voy a usar ! + otro simbolo(! o * o $ o ^).Genial.
Por último,lo importante es el concepto.Esta lógica es la misma en Java,Python,C#,etc...

					VIDEO 03 PATRON CREACIONAL FACTORY

Este patrón permite instanciar objetos en tiempo de ejecución(runtime).Esto se traduce en que puedo crear instancias de objetos a demanda.Estos objetos tendrán en común la misma interfaz
El autor recuerda que se dejó este patrón cuando presentó los creacionales.Este patrón es muy fácil de implementar

Caso práctico: necesito procesar las órdenes de compra y calcular el costo que asumimos según el método de pago
PayPal - 6%
Visa - 5%
MasterCard - 4%

Esto serán tres clases,de las cuales lo único que me interesa es la implementación(la interface que implementan):

import IPaymentMethod from "../../src/payment-method.interface";

export default class PayPal implements IPaymentMethod {
  get comission(): number {
    return 0.05;
  }

import IPaymentMethod from "../../src/payment-method.interface";

export default class Visa implements IPaymentMethod {
  get comission(): number {
    return 0.06;
  }
}

y la tercera:
import IPaymentMethod from "../../src/payment-method.interface";

export default class MasterCard implements IPaymentMethod {
  get comission(): number {
    return 0.04;
  }
}
La interface luce asi:
export default interface IPaymentMethod {
  comission: number;
}
Fijate como el get comission ha hecho cumplir la interfaz(pero si es un método?).
Bien,creamos una clase order para que procese las Ordenes:

export default class Order {
  public paymentType?: IPaymentMethod;
  public comission: number = 0;

  constructor(
    private type: PaymentType,
    public amount: number) { }
 
  public create(): void {
    if(this.type === PaymentType.Visa) { 
      this.paymentType = new Visa();
    }
    if(this.type === PaymentType.MasterCard) { 
      this.paymentType = new MasterCard();
    }
  }
}
Fijate en el método create.Esta aproximación funcionaría,pero no es una solución práctica.El patrón factory encapsulará esta lógica dejandola reutilizable.
	
Lo que voy a hacer es crear esta clase(que fijate que es lo que iba a tener el método).De esta manera este código es reutilizable y escalable.

export default class PaymentMethodFactory {
  public static createPaymentType(type: PaymentType): IPaymentMethod {
    if (type === PaymentType.MasterCard) {
      return new MasterCard();
    }
    if (type === PaymentType.Visa) {
      return new Visa();
    }
    if (type === PaymentType.PayPal) {
      return new PayPal();
    }
    throw new Error("Payment type not found");
  }
}
Esta clase PaymentMethodFactory se va a volver una fábrica de tipos de métodos de pago(fijate que hicimos el método estático)

Ahora el método create sólo necesita una linea de código:

  public create(): void {
    this.paymentType = PaymentMethodFactory.createPaymentType(this.type);
    this.comission = this.paymentType.comission * this.amount;  }
}
Obviamente habría más lógica en un proyecto real.Hagamos un par de tests:

describe('Order - MasterCard', () => {
  it('Order must be paid by mastercard', () => {
    expect(true).to.equal(order2.paymentType instanceof MasterCard);
  })

  it('Order comission must be 4', () => {
    expect(4).to.equal(order2.comission);
  })
})


describe('Order - PayPal', () => {
  it('Order must be paid by paypal', () => {
    expect(true).to.equal(order3.paymentType instanceof PayPal);
  })

  it('Order comission must be 5', () => {
    expect(5).to.equal(order3.comission);
  })
})

Resumen patrón adapter: permite que una clase B se comporte como una clase A,siendo incompatibles.Se consigue mediante una tercera clase AdapterBtoA que recibirá por constructor una instancia de B y desarrollará el método que implementa la clase A desde su interfaz.
Entonces necesito dos clases y una interfaz desde un principio?

				VIDEO 04 PATRON CREACIONAL ABSTRACT FACTORY

Es un patrón que resuelve problemas de creación o de instanciación de objetos.
Permite agrupar familias de objetos para su creación.
En pocas palabras es una fábrica de fábricas de objetos(fijate que es como el padre de el anterior,que era una única fábrica de objetos).

El caso práctico es el siguiente:
Necesitamos publicar un mensaje en las distintas redes sociales y canales de chat:
Facebook
LinkedIn
Slack
Pero se nos presenta un reto o problema:para conectarnos a cada canal necesitamos (o simplemente tenemos) más de una clase.Es decir,tenemos una clase de conexión y otra clase de publicación del mensaje

Imaginemos este punto de partida:
class PublisherFactory {
  getConnector(type:string): IConnector {
   if(type==="FacebookConnector){
      return new FacebookConnector();
   }
   if(type==="LInkedInConnector){
      return new LinkedInConnector();
   }
   if(type==="SlackConnector){
      return new SlackConnector();
   }
  throw new Error("Invalid type");
  }
}

  getPublisher(type:string,connector:IConnector):IPublisher {
    if(type==="FacebookPublisher"){
      return new FacebookPublisher(connector);
    }
    if(type==="LinkedInPublisher"){
      return new LinkedInPublisher(connector);
    }
    if(type==="SlackPublisher"){
      return new SlackPublisher(connector);
    }
    throw new Error("Invalid type");
  }
}
Si ahora quisiera agregar un nuevo canal de publicación tendría que añadir otras dos condiciones.
Este código también lleva a errores,si llamo al getPublisher con un connector incorrecto dará un error.
Es decir, el desarrollador debe saber exactamente con que clase debe trabajar.A través de abstract factory vamos a evitar esto,ya que sólo me interesará la implementación(es decir,su uso)

La fábrica lucirá asi(fijate que se trabaja todo con interfaces,no queremos saber nada de la clase):

export default interface IAbstractFactory {
  getConnector():IConnector;
  getPublisher(connector: IConnector):IPublisher;
}

Fijate como cada clase deberia recibir en el constructor el conector,para poder publicar:
export default class LinkedinPublisher implements IPublisher {
  constructor(private connector: IConnector) { }

  publish(content: string): void {
    // Your logic to publish on Linkedin
    console.log("Linkedin");
    console.log(content);
  }
}

Fijate como el conector también es otra clase que implementa otra interfaz:
export default class SlackConnector implements IConnector {
  open(): void {
    // Logic to make a valid connection
  }

  close(): void {
    // Logic to close the current connection
  }
}
Y la fábrica de Slack luce asi:
export default class SlackFactory implements IAbstractFactory {
  getConnector(): IConnector {
    return new SlackConnector();
  }

  getPublisher(connector: IConnector): IPublisher {
    return new SlackPublisher(connector);
  }
}
Fijate ahora en lo que creamos:
export default class Publisher {
  constructor(private content: string){ }

  public send(factory: IAbstractFactory){
    const connector = factory.getConnector();
    const publisher = factory.getPublisher(connector);

    connector.open();
    publisher.publish(this.content);
    connector.close();
  }

}
Esta clase recibe el contenido a mandar en el constructor,y en el método send recibe una instancia de IAbstractFactory,da igual cual.Según cual sea llamará a su getConnector y getPublisher(connector).Increible.

					VIDEO 05 PATRON ESTRUCTURAL ADAPTER

El patrón Adapter es de tipo estructural y permite solucionar problemas de incompatibilidad entre dos clases.
El caso propuesto es el siguiente: tenemos nuestro legacy code que ya está en producción que permite publicar en facebook.Ahora también queremos publicar en slack

El problema es que Facebook implementa una interfaz o contrato,pero la clase que queremos crear(Slack),no es compatible con ese contrato y obviamente Facebook ya está en producción(puedo ver a Slack como una libreria externa que no puedo modificar)
El patrón Adapter busca solucionar esto,la incompatibilidad entre dos clases:

La interface o contrato luce asi:
export default interface INotification {
  post(title:string,message:string):void;
}

La clase Facebook cumple el contrato:
class FacebookNotification implements INotification {
  public post(title:string, message:string){
  console.log(`Sending ${title} - ${message} to Facebook.`);

Pero la clase Slack es posterior y no va a cumplirlo,incluso tiene otro nombre el método aparte de diferente nº de argumentos:
class SlackNotification {
  public send(channelId: string, title: string, message: string){
    console.log(`Sending #${channelId} - ${title} - ${message} to Slack`);

Recuerda que la solución es crear una clase Adapter que implemente la interfaz original y que reciba por constructor la clase a adaptar:

class SlackAdapter implements INotification {
  constructor(private slackNotification: SlackNotification){}

  public post( title: string,message:string){
    this.slackNotification.send("general",title,message)

* NOTA: el servicio ya no es parte del patrón.Solo es parte la clase y contrato original y la clase posterior a adaptar que no puede cumplir el contrato y por ello hay que crear otra que lo cumpla y reciba una instancia por constructor de esta clase a adaptar 
Fijate que ahora podria crear un service que reciba un arreglo de INotification:

class NotificationService {
  constructor( private providers: INotification[]){}
   
  public post(title: string, message: string) {
  this.providers.forEach( p => p.post(title,message)); <- aqui irá el polimorfismo

Fijate que ese método post del servicio se resuelve polimorficamente.Ahora ya solo habria que crear ese arreglo y llamar al servicio:

const providers: INotification[] = [
  new FacebookNotification(),
  new SlackAdapter(SlackNotification()) <- fijate en el uso del adapter
]
const nS = new NotificationService(providers)
nS.post("nuevo curso","25% de descuento") <- fijate que el servicio además mandará el post a ambas redes sociales,adaptandose según cual sea por polimorfismo.
El servicio no es parte del patrón.

				VIDEO 06 PATRÓN ESTRUCTURAL DECORATOR

Este patrón permite agregar comportamiento a nuestro objeto sin alterar su estructura.Es decir,que no voy a agregar más codigo,sino que cambiaré su comportamiento en tiempo de ejecución. 
Cada comportamiento extra se conseguirá mediante un decorador que "decora" el objeto original,pero no lo modifica.
Caso propuesto: tenemos una tienda de música y queremos aplicar diferentes descuento tanto en base al cliente como en base a la campaña actual.

IMPORTANTE: este problema podría solucionarse con ifs:
const product = new Product("Guitarra Suhr Classic",2500);

if(customer.isFirstBuy){
  const discount = campaignService.getByCode('FIRST-BUY');
  product.price = product.price - discount;
}
if(customer.type === 'VIP'){
  const discount = customerService.getVipDiscount();
  product.price = product.price - discount;
 }

Este codigo es perfectamente válido,pero no es escalable ni mantenible.

Si aplicamos el patrón decorador la solucion sería la siguiente:
let discount = new BasePrice();

if(customer.isFirstBuy){
  discount = new SpecialPriceDecorator(discount);
}
if(customer.type === 'VIP'){
 discount = new VipCustomerDecorator(discount);

product.setSpecialPrice(
 discount.calculate(product.price))

Igual se podia mejorar un poco.Sea como sea fijate que la clave está en que en el constructor de las subclases que implementan la abstracción se recibe una instancia de la misma:

export class VipCustomerDecorator implements IDiscount {
  constructor(private readonly decorator: IDiscount) { }

De esta forma se podrá llamar a otra clase decoradora con la anterior.

				VIDEO 07 PATRON ESTRUCTURAL PROXY PATTERN

Este patrón trabaja como un intermediario para cambiar el comportamiento de una clase sin cambiar su estructura.
Esto quiere decir que funciona como una capa intermedia,que básicamente va a hacer lo mismo que el objeto que está encapsulando pero puede anidar comportamiento adicional

Veamos el siguiente caso propuesto:
Estamos trabajando en una empresa y queremos traer/mostrar  una playlist de Kodoti de Youtube.
Retos:
1- los videos deber ser mostrados en nuestra página principal
2- Se estima que se recibirán 1500 visitas al día,con lo que podria haber delay y una mala experiencia de usuario 

La solución va a ser crear un proxy que se conecte al API de Youtube.Asi mismo,el proxy implementará un sistema de caché local para que solucione los posibles problemas de  concurrencia.Es decir,el primer usuario que se conecte a la API de Youtube cada día creará esa cache para el resto de usuarios,y será el único que se conecte a Youtube,los demás al proxy cacheado

Crearé dos clases, youtube.api.ts y youtube.proxy.ts.La primera se conectará a la API de Youtube,la segunda es la clase intermediaria,la que hará de caché.

Incluso crearemos una interface por si queremos cambiar el Provider.Luce asi:

interface IVideoProvider {
  getPlayList(code: string): Promise<String[]>
}
export { IVideoProvider }

En cuanto a la clase que hace la petición directamente vamos a simular que la consulta es muy lenta(3000ms):

class YoutubeAPI implements IVideoProvider {
 private _playlist: any = {
   courses: [
     'https://www.youtube.com/watch?v=dQw4w9WgXcQ',
     'https://www.youtube.com/watch?v=Ph4SLROqSEQ',
     'https://www.youtube.com/watch?v=Tvs3r0TVc$I',
    ]
 }
 /* el code solo podrá ser courses y devolverá el arreglo de URLS */
  async getPlayList(code: string): Promise<String[]> {
    return new Promise( (resolve, reject) => {
      setTimeout(() => {
        const result = this._playlist[code] || null;
        resolve(result);
      }, 3000)
    })
  }
}

export { YoutubeAPI }

Asi pues,estoy obligado a crear la clase Proxy(también puedo suponer que esta API es inaccesible,o es un paquete externo).Veamos esa clase proxy:
class VideoProxy implements IVideoProvider {
  private _cache: any = {};

  constructor(private readonly provider: IVideoProvider) {

  }

  async getPlayList(code: string): Promise<String[]> {
    let result = this._cache[code];
    if(!result) {
      result = await this.provider.getPlayList(code);
      this._cache[code] = result;
    }
    return result;
  }
}

export { VideoProxy }
Fijate que este proxy recibirá un Provider y hace la petición una vez(aqui hay mucho del patrón Singleton,ya que hay recursividad en la función al llamarse la propiedad a si misma en el retorno de la función)

Ahora ya solo faltaría simular 4 o 5 peticiones y veré como sólo la primera pasa por la clase YoutubeAPI y las demás pasan por VideoProxy por polimorfismo y recursividad de la propiedad.


/* instancio la clase Proxy ojo,no la otra,mediante downcasting y polimorfismo podré usar ambas.Fijate en la composición sobre herencia tmb */
const proxy = new VideoProxy(new YoutubeAPI());

(async () => {
  /* la primera vez debería tardar unos 3 segundos */
  await getPlayList();
  /* sucesivas llamadas cogerían la data de la caché y tardarían nada */
  await getPlayList();
  await getPlayList();
  await getPlayList();
})();

async function getPlayList() {
  const startDate = new Date();
  await proxy.getPlayList('courses');
  const endDate = new Date();

  console.log(`El proceso se completó en ${(endDate.getTime() - startDate.getTime())/1000} segundos`);
}
Puedo ver que la salida es la esperada y sólo el primero tiene que esperar:

El proceso se completó en 3.002 segundos
El proceso se completó en 0 segundos
El proceso se completó en 0 segundos
El proceso se completó en 0 segundos

		VIDEO 08 COMMMAND PATTERN -PATRONES DE COMPORTAMIENTO

El patrón Command(O Comando) permite resolver una operación sin conocer el contenido de ésta o el receptor.Es decir,él sólo va a ejecutar un comando,sin importar el contenido(todo esto se resume en: sólo debo exponer el contrato y no las implementaciones)
El cómo se cumpla esa tarea u operación no es importante,no nos interesa
TIP: el gran beneficio que aporta este patrón es la segregación

Caso práctico: un cliente realiza un pago mediante una credit card.El cliente no sabe cual,pero podría ser PayPal,MasterCard,...El cliente no tiene en ningun momento conocimiento del proveedor de servicios de pago.
Crearemos para la solución una capa intermedia que se llamará CommandHandler y va a recibir una interfaz.Esa interfaz ejecutará cualquiera de los métodos de pago(por polimorfismo??)

Esta abstracción tendrá la propiedad providerName y el método abstracto handle que maneja dicha transación:

export interface ICommand {
  providerName: string;
  handle(): void;
}

Ahora tendré una carpeta payment-commands(fijate que cada proveedor de pago se ha vuelto un comando).Cada command es una implementación:

import { ICommand } from "../command.interface";


export class CulquiCommand implements ICommand {
  public readonly providerName: string = "Culqui";

  constructor( private readonly creditCardDef: CreditCardDto){}

  handle(): void {
    console.log(`Paying with ${this.providerName}`);
    // logic to handle the payment with this provider
  }
}

IMPORTANTE: fijate que las tres implementaciones/comandos tienen algo en común,y es que en el constructor van a recibir por composición el mismo objeto(en este caso es un objeto de transporte,por eso lo llama DTO(Data Transfer Object):

type CreditCardType = 'visa' | 'mastercard' | 'paypal';

class CreditCardDto {
  constructor(
    private readonly cardtype: CreditCardType,
    private readonly cardCustomerFullName: string, 
    private readonly cardNumber: string, 
    private readonly cardCcv: string, 
    private readonly transactionAmount: number,
  ) { }
}
* Puedo usar un objeto de transporte porque todos van a compartir estos parámetros.Por último queda una clase que llamará a un método que trabaja con los comands:
import { ICommand } from "./command.interface";


export class PaymentMethodHandler {
  process(command: ICommand): void {
    console.log('Payment method handler has been started');
    command.handle();
  }
  forceToProcess(commands: ICommand[]): void {
    for (const cmd of commands) {
      try {
        if (cmd.providerName === 'Culqui') {
          throw new Error('Culqui is not supported');
        }
      } catch (error) {
        console.warn(`\tERR: ${error}`);
      }
    }
  }
}

Ya solo falta llamar a esta clase:
const creditCard = new CreditCardDto(
  'visa',
  'John Doe',
  '1234567890123456',
  '123',
  100,
)
/* clase que llamaba a process(command:ICommand) */
const paymentMethodHandler = new PaymentMethodHandler();

/* fijate en la doble composición,process necesita dos objectos,ojo */
paymentMethodHandler.process( new CulquiCommand(creditCard) );

paymentMethodHandler.forceToProcess([
  new CulquiCommand(creditCard),
  new PaypalCommand(creditCard),
  new MercadoPagoCommand(creditCard),
])

Fijate que este patrón lo que hace es encapsular cierta funcionalidad de una clase.


