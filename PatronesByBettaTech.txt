					PATRONES DE DISEÑO POR BETTATECH
Recuerda que cuando quiera tabular en los snipets de VSC tengo que ser muy preciso y no salir con el escape.

Source: https://www.youtube.com/watch?v=lLvYAzXO7Ek&list=PLJkcleqxxobUJlz1Cm8WYd-F_kckkDvc8&index=3&ab_channel=BettaTech

				VIDEO 02 PATRON CREACIONAL SIMPLE FACTORY

Imagina un videojuego con varias clases de enemigos.O cualquier cosa con varias versiones diferentes.Todas ellas implementaran una interfaz(Entity en este caso):

export interface Entity {
  updateLogic():void;
}

Cada implementación de la abtración luce asi:

export default class Boo implements Entity {
  updateLogic(): void {
      console.log('Boo is attacking');
  }
}
Y otra más luce asi:

export default class Goomba implements Entity {
  updateLogic(): void {
      console.log('Goomba is attacking');
  }
}
Realmente sencillo y claro.Ahora viene la clave de todo,ya que este patrón está basado en el polimorfismo,aparte de crear las instancias en tiempo de ejecución:

export default class EnemyFactory{
rt default class EnemyFactory{
  
  public static createEnemy(){
    let randomNumber = Math.random();
    let enemy;
    /* fijate que estoy creando un algoritmo para instanciar enemigos */
    if(randomNumber > 0.66){
      enemy = new Koopa();
    }else if(randomNumber > 0.33){
      enemy = new Goomba();
    }else {
      enemy = new Boo();
    }
    return enemy.updateLogic();
  }
}

Puedo observar que tras llamar al método estático de esta clase,que es la Factory:
for(const x of Array(5)) {
  EnemyFactory.createEnemy();
}
Se crearán 5 instancias determinadas en tiempo de ejecución.La clave está en el polimorfismo,lya que el método updateLogic mutará según sea una instancia u otra.
Obviamente es un ejemplo muy sencillo.
		
				VIDEO 03 PATRON CREACIONAL ABSTRACT FACTORY

Este patrón tiene mucha relación con Simple Factory.El ejemplo es un caso de uso de manual.Sería el caso de SuperMario,que permite modificar los gráficos del nivel,cambiando completamente la visualización de cada objeto.
Definición: es un patrón de diseño que provee una interficie para crear familias de objetos relacionados o dependientes sin especificar su clase concreta

Fijate que en nuestro ejemplo esos objetos estan relacionados por el tema(graficos de GameBoy o graficos estilos NintendoDS).
Y fijate también en lo de no especificar su clase concreta,es decir sigo trabajando 100% con abstracciones.
Montar todo esto es un poco lioso,pero no dificil.

1- En vez de crear una factoria con un método para crear cierto objeto tengo una factoria abstracta con varios métodos que crean varios tipos de objeto:

export interface AbstractFactory {
  createMoneda():Moneda;
  createBloqueInterrogante(): BloqueInterrogante;

2- Es responsabilidad de la implementación concreta(clase) de esta factoria abstracta implementar estos métodos y crear instancias concretas:

export class GameBoyItemFactory implements AbstractFactory {
  createMoneda():Moneda {
    return new GameBoyMoneda();
  }
  createBloqueInterrogante():BloqueInterrogante {
    return new GameBoyBloqueInterrogante();
  }
}
export class NintendoDSItemFactory implements AbstractFactory {
  createMoneda():Moneda {
    return new NintendoDSMoneda();
  }
  createBloqueInterrogante():BloqueInterrogante {
    return new NintendoDSBloqueInterrogante();
  }
}
 
Otro ejemplo podria ser el tipico darkTheme/lightTheme.Una implementación crearía elementos gráficos en modo claro y otra en modo oscuro.
IMPORTANTE: fijate que NintendoDSMoneda es una interface,luego crearía MonedaPlat,MonedaOro,etc.Esto lo puedo ver en el diagrama UML adjunto.
NOTA: es responsabilidad de las implementaciones de la AbstractFactory instanciar unas clases u otras,pero desde fuera nunca se sabe ni se debería saber con qué clase concreta estoy trabajando es por esto que instancian la interfaz que resolverá por polimorfismo la clase

				VIDEO 04 PATRON COMPORTAMIENTO STRATEGY

Este patrón es un patrón de comportamiento,por lo que es un patrón que sirve para encapsular lógica.El objetivo de este patrón es poder tener diferentes algoritmos(soluciones),diferentes lógicas para asi tener la capacidad de poder cambiar de una a otra de una forma muy elegante(en runtime).
Imaginemos el juego de Pokemon que tiene miles de ataques diferente(pueden hacer daño,bajar defensas,subir las tuyas,...)

Implementar esto podría derivar en un super-método como este:
function computePokemonAttack(battle:BattleState,SelectedAttack:Attack){
if(attack.type === 'PHYSICAL'){
  battle.foePokemon.makePhysicalDamage();
else if (attack.type === 'SPECIAL'){
  battle.foePokemon.makeSpecialDamage();
if(attack.diminishesPhysicalAttackStats ...

Este método es insostenible,inmantenible,ilegible,...En pokemon existen más de 700 ataques diferentes,este método terminaría siendo gigantesco y super complejo.

 Una posible solución es el patrón Strategy,ya que permite ejecutar diferentes "lógicas" o estrategias.La clave está en crear diferentes objetos que representen estas estrategias.Estas estrategias vendrán todas de la Interfaz Base Strategy,con lo que son intercambiables y usables de forma polimorfica(fijate que incluso podría crear subgrupos con cuidado)

1- El código anterior quedaría asi.La función gigante pasa a:

function computeTurn(state:BattleState,myAttack: AttackStrategy,foeAttack: AttackStrategy) {
 state = myAttack.ejecutarAtaque(state);
 state = foeAttack.ejecutarAtaque(state);

2- La interfaz para una estrategia o algoritmo queda asi:
export interface AttackStrategy {
  ejecutarAtaque(battle:BattleState):BattleState

3- Ahora ya solo tengo que definir estrategias:
export class RainStrategy implements AttackStrategy {
  ejecutarAtaque(battle:BattleState):BattleState {
  let randValue = Math.random();
  if( randValue > 0.5) {
     battle.startRain();
  return battle

* Y otra que baje la defensa
export class DiminishStatsStrategy implements AttackStrategy {
  private stat: PokemonStat;
  constructor(stat:PokemonStat){
  this.stat=stat;
  }
  ejecutarAtaque(battle:BattleState):BattleState {
  battle.foePokemon.diminishStat(this.stat)
  return battle;

Lo mejor de todo es que puedo crear cualquier tipo de ataque que no tendré que modificar la función que los utiliza.
TIP:en cuanto quiera hacer esto un poco más complejo este código se queda un poco cojo y se suele combinar con el abstract factory(en vez de crear estrategias una por una las creo con el patrón abstract factory,creando grupos etc,...)
Fijate que abstract factory crea una interfaz para grupos de objetos relacionados(magia,defensa,ataque) sin especificar su clase concreta,con lo que le va al pelo
También combina muy bien con State o Composite

Ejemplo dos: impresiones de un log registry a un fichero.La Strategy sería la propia impresion.Esta interfaz la define
export interface Logger {
  write(message:string):void

1- Una estrategia sería simplemente escribir por consola
export class ConsoleLogger implements Logger {
  write(message: string):void {
    console.log(message);

2- Pero otra sería escribir a un fichero:
const fs = require('fs');
export class FileLogger implements Logger {
  private filePath:string;
  constructor(filePath:string) {
    this.filePath = filePath;
  }
  write(message:string):void {
  fs.appendFileSync(this.filePath,message)

Fijate que el patrón Strategy intenta desacoplar la lógica de varias posibles acciones de una clase.Es una gran forma de delegar funcionalidades que pueden ir cambiando a lo largo del tiempo.Siempre que tenga cierta lógica que puede cambiar debería sopesar si puedo implementar este patrón. 
Implementar este patrón hace que mi programa termine siendo muy modular,pudiendo combinar las diferentes partes para conseguir diferentes funcionalidades(y fijate si encima lo combino con otros).

				VIDEO 05 PATRON CREACIONAL SINGLETON

Seguramente es el patrón más famoso.Hay mucha controversia,ya que muchas veces se implementa sin ser necesario.Otros piensan que es un antipatrón
El objetivo de utilizar el patŕon Singleton es el de asegurarme que existe tan sólo una única instancia de una clase concreta.De echo,será imposible instanciar otra,pues se me devolverá la primera.
No es un patrón que se utilice cuando quiero usar una instancia,sino cuando quiero asegurarme que no se pueda crear más de una.
Aparte de asegurarme de esto Singleton provee una accesibilidad global a esta instancia,pudiendo accesarla desde cualquier parte del programa.
Hay muy pocos casos de uso donde realmente es necesario este patrón,uno de ellos es acceder a recursos que deban ser accedidos de forma individual(un fichero de logs,donde no quiera que varias instancias escriban al mismo archivo).

Bien,pero,¿cómo consigue Singleton esto?.La clave es un constructor privado y una propiedad estática(y privada) del mismo tipo que la clase:

class Unique {
  private static instance: Unique;

  private constructor(){};

  public static getInstance():Unique {
    if(!Unique.instance){
      Unique.instance = new Unique();
    }
    return Unique.instance;
  }
}
Fijate que es la propia clase la que gana el control de como instanciar sus objetos,y que además bloqueo el acceso desde fuera de instanciarla,sólo dejo el método público getInstance(por convención).
Es responsabilidad de la clase guardar su instancia.
En testing o conexiones a DB y videojuegos es común usar este patrón.

				VIDEO 06 PATRON ESTRUCTURAL DECORATOR

El patrón decorator es un patrón estructural que me permite extender funcionalidad/comportamientos de forma dinámica(en runtime) desde una clase/objeto sin tener que recurrir a la herencia.
Es muy común crear una estructura de clases supercompleja a la hora de querer añadir funcionalidad a una clase ya existente(y por ende a sus objetos).

Imagina un juego donde los enemigos tienen power ups,por ejemplo se pueden poner armadura,lo que modifica la forma que tengan de andar o de defenderse.
Incluso pueden tener un casco que los haga inmunes a los golpes en la cabeza.

Si implemetará el camino del asinto crearia estas clases:
EnemigoA
EnemigoAConCasco
EnemigoAConArmadura
EnemigoAconArmaduraYCasco

Esta solución crea una cantidad de clases simplemente inmantenible.Recuerda,composición siempre vs herencia(fijate que composición es pasar la instancia en el constructor)

El comportamiento base sería el enemigo sin nada,despues cada decorador modificará esta clase base.
IMPORTANTE:no sólo puedo añadir un decorador a un enemigo/objeto base,sino a cualquiera ya modificado/decorado,con lo que las posibilidades son infinitas(puedo decorar a un enemigo con casco poniendole una armadura,y a éste con un escudo,etc)

Fijate que la idea de este patrón es como las matriuskas.Un decorador con casco tendrá dentro de sí a un decorador con armadura y éste tendrá dentro el enemigo base.Es como una composición o agregación de componentes(un decorador no solo decora un componente,sino que también es un componente,con lo que puede decorarse).Fijate que esto es muy importante,asin

Fijate que el resultado de este patrón es como una cebolla,es una organización por capas,donde la capa más  interna sería el personaje base y cada capa extra es un comportamiento(decorador) añadible en runtime.

El hecho de que un decorador se pueda comportar como un componente de forma polimorfica me permite abstraerme de lo que tenga dentro(tengo un componente,pero este componente podria estar ya decorado,pero da igual,pues es un componente,y por ello lo puedo decorar de nuevo).

IMPORTANTE: para que se dé este polimorfismo el componente,lógicamente, será una abstracción.En este caso será la interface Enemy,la cual implementarán los ConcreteEnemy:

export interface Enemy {
  computeDamage(receivedAttack: number): number
}

La concreccion sería asi:
class ConcreteEnemy extends Enemy { <- implements si es interface
  computeDamage(receivedAttack): number {
  console.log('Oh nooo');
  return 100;
}

Y la abastracción para los decoradores sería asi(puede ser abstract class??):
class EnemyDecorator extends Enemy {
  decoratedEnemy: Enemy;
  
  constructor(enemyToDecorate: Enemy){
  this.decoratedEnemy=enemyToDecorate;
  }
  computeDamage(receivedAttack):number {
  
};

Ahora ya puedo implementar decoradores:
class ConcreteEnemyDecorator extends EnemyDecorator { <- fijate que todo dios es un Enemy

  computeDamage(receivedAttack):number {
    this.decoratedEnemy.computeDamage(receivedAttack)

La implementación de todo esto sería algo así:
function xxx(){
  //creo el enemigo base
  let enemigoDesnudo = new ConcreteEnemy();
  // añado el primer decorador
  let enemigoConArmadura = new ArmourDecorator(enemigoDesnudo); <- clave!!
  //añado otro decorador
  let enemigoConArmadurayCasco = new HelmetDecorator(enemigoConArmadura);

La clave es meter en el constructor el componente ya decorado o no previo.
El orden en que implemente los decoradores puede tener influencia en el comportamiento,ojo!.Si un decorador dividiera el daño por dos no es lo mismo implementarlo antes o despues de un ataque.
Añadir un nuevo decorador implicaría simplemente añadir una clase nueva lo que facilita en gran medida la extensión del sistema.

			VIDEO 07 EJEMPLO DEL PATRON ESTRUCTURAL DECORATOR

Bien,lo primero es identificar que función va a tener la lógica con el polimorfismo,en este caso es takeDamage():
PASO UNO: llegar a la función que quiero decorar
let enemy = new BaseEnemy();

/* fijate que lo que quiero es decorar la función takeDamage.Esto es la base de todo */
let computedDamaged = enemy.takeDamage();
PASO DOS : creo la abstracción para enemigos y una concrección:
export interface Enemy {
  takeDamage(): number;
}
Clase:
import { Enemy } from "../abstracciones/Enemy";

export default class BaseEnemy implements Enemy {
  takeDamage(): number {
    return 10;
  }
}
Hasta aqui todo muy fácil.Es desde aqui desde donde quiero tener decoradores que cambien el comportamiento de esa función en caliente además.
IMPORTANTE: para implementar el patrón tengo que crear otra abstracción que especifique qué es un decorador.Recuerda que además es un BaseEnemy esa abstracción.

/* por polimorfismo un decorador será un Enemy */
export default abstract class EnemyDecorator implements Enemy {
  takeDamage(): number { }
}
Y es aqui donde tengo que montar ese sistema de capas.Es tan fácil como crear una propiedad de tipo Enemy y dejar que se resuelva más adelante el método abstracto takeDamage que tendrán que desarrollar las concrecciones de decorador.
PASO TRES
export default abstract class EnemyDecorator implements Enemy {
  protected enemy: Enemy;
  
  constructor(enemy: Enemy) { this.enemy = enemy; }

  abstract takeDamage(): number { return this.enemy.takeDamage(); }

}
PASO CUATRO: ahora si,ya puedo empezar a crear concrecciones que serán un decorador(implementarán esa abstract class,fijate que tuvo que ser abstract class la abstracción para un decorador):
NOTA:es aqui donde debo tener bien claro que tengo acceso a esa propiedad protected y al método takeDamage y puedo sobreescribirlo:

export class HelmetDecorator extends EnemyDecorator {
  /* fijate que tengo acceso a enemy pues es la subclase y la declaré protected,otra cosa importante.Además puedo sobreescribir takeDamage.Ni siquiera usaré el constructor,aunque si lo usará sería el mismo resultado */
  takeDamage(): number {
    return this.enemy.takeDamage()/2;
  }
}
Ya puedo crear una instancia de esta clase y pasarla por constructor el enemy(fijate que pude haber puesto el constructor,pero me vale el de la abstract class):

let enemy = new BaseEnemy();
let enemyWithHelmet = new HelmetDecorator(enemy);
let computedDamaged = enemyWithHelmet.takeDamage();

Fijate que esto abre un mundo,podría programar bufos,armadura,golpes que metan estados,...(debería hacer el juego de Python)
TAREA: implementar decorador para armadura(daño 1/3):

export default class ArmourDecorator extends EnemyDecorator {
  takeDamage(): number {
    return this.enemy.takeDamage() / 3;
  }
}
let enemy = new BaseEnemy();
let enemyWithHelmet = new HelmetDecorator(enemy);
let enemyWithArmour = new ArmourDecorator(enemyWithHelmet);
let computedDamaged = enemyWithArmour.takeDamage();
console.log(computedDamaged);
> 1.6666667 <- puedo ver que se dividio primero por dos y despues ese 5 por 3.Aqui entraria el orden etc...
TIP: fijate que podría hacer lo mismo con varios métodos en vez de uno.Genial

				VIDEO 08 OBSERVER behaviour pattern

El patrón observer está implementado en muchisimas librerias de programación.Primero veré la teoria y despues el código.
IMPORTANTE: el patŕon observer se utiliza cuando aparece la necesidad de notificar cambios de estado a algun objeto.
CASO PRÁCTICO: imagina un canal de youtube.Este canal(que será un objeto) tiene un estado concreto en un momento determinado del tiempo.Me encuentro ante la necesidad de que cada vez que aparezca un video nuevo notificar a todos los suscriptores
Fijate que el canal de Youtube sería el objeto a observar(el Observable) y cada suscriptor sería el objeto que observa(el Observador).Esto debo tenerlo claro.
Fijate que el Observable necesita saber quienes están observando,sus Observers,para asi notificarlos.El Observable necesita acceder a los Observers.
Dado que tiene está funcionalidad el Observable necesitará añadir y eliminar Observers(será una abstracción):

Subject(interface para el Observable)    <- interface Observer
  + attach(o: Observer)                       +update()
  + detach(o: Observer)
  + notify()

* De aqui saldrán concreciones,de ambas interfaces.
ConcreteSubject                       ConcreteObserve
  - state: State                      - observerState: State
  + getState (): State                + ConcreteObserver(subject: Subject)
  + setState (s: State)               + update()

Fijate que ni notify ni update llevan argumentos.La clave está  en la composición ya que ConcreteObserver lleva por constructor una instancia de un Observable(de echo,esto es vital).De esta forma el Observador tiene acceso a los métodos del Observable y asi acceder al nuevo estado cada vez que reciba una notificación.

NOTA: el Observer debe poder hacer algo con la notificación,de hay el update(sería recibir el mensaje del video nuevo,etc...)

Veamoslo en código,ya que quedará mucho más claro:
Abstracciones(fijate la importancia de poder atarse a un Observable con attach)
import { Observer } from "./video-observer"

export interface Observable {
  attach(o: Observer):void
  detach(o:Observer):void
  notify():void
}

export interface Observer {
  update():void;
}
Y las concrecciones sería un Canal de Youtube y los Suscriptores.Queda claro qué interfaz implementa cada uno,pues el canal es el Observable o fuente de emisiones:
export class YoutubeChannel implements Observable{
export class Subscriber implements Observer {} 

IMPORTANTE: otro concepto clave es que el Observable debe tener un listado con todos los Observers que tiene.En este caso será un propiedad:

export class YoutubeChannel implements Observable{
  private channelSubscribers: Observer[] = []

  attach(o: Observer): void {
    this.channelSubscribers.push(o);
  }
  detach(o: Observer): void {
    this.channelSubscribers = this.channelSubscribers.filter(subscriber => subscriber !== o);
  }
  notify(): void {
    this.channelSubscribers.forEach(subscriber => subscriber.update());
  }
}
Notify simplemente recorre el arreglo de Observers y llama a su observer.update().Perfecto.

IMPORTANTE: recuerda también que el Observer mantiene una referencia en el constructor al Observable,para poder hacer GET de la información necesaria:

export class Subscriber implements Observer {
  private observable: Observable;

  constructor(o: Observable){
    this.observable = o;
    // this.observable.attach(this); //mejor a mano
  }
  update(): void {
    console.log("New video posted");
  }

Aún faltaria que el Observable realice algo, y que esa lógica la coja el hijo(fijate de nuevo que esto es otro concepto clave,el hijo debe poder acceder):

  addNewVideo(videoTitle: string): void {
    this.lastVideoPosted = videoTitle;
    this.notify();
    console.log("New Youtube video added to channel");
  }

Ya solo faltaría instanciar las concreciones(fijate que podria haber echo el attach automáticamente,quizas pierda flexibilidad por ello):

let channel = new YoutubeChannel();
let s1 = new Subscriber(channel);
let s2 = new Subscriber(channel);

channel.attach(s1);
channel.attach(s2);

channel.addNewVideo("Publicado video 1 del patrón observer");

Si ejecuto el programa:
ts-node src/main.ts 
New video posted!!
Publicado video 1 del patrón observer
New video posted!!
Publicado video 1 del patrón observer

Si bien son un par de pasos,es sencillo para mi esto.Debo identificar cuando aparece esa necesidad de notificar cambios de estado a un objeto/s para implementar el patrón.

					VIDEO 09 COMPOSITE PATTERN 



						VIDEO 10 PATRÓN BRIDGE 

La definición formal es: el patrón bridge desacopla una abstración de su implementación, para que las dos puedan cambiar de forma independiente.

Si bien esto puede parecer un tanto abstracto con un ejemplo quedará más claro:
Imaginemos que queremos renderizar listas,pero pueden ser diferentes tipos de listas(unas tendrán imágenes,otras no,..etc,unas tendrán comentarios,etc).

Si bien iriamos correctamente con una única abstración o superclase que implementarían las clases originales VideoSinMiniaturaListItem, VideoConMiniaturaListItem, StreamSinMiniaturaListItem y StreamConMiniaturaListItem, en cuanto quisieramos añadir más funcionalidad tendríamos un problema.
En esta aproximación hay un alto acople,ya que tengo que crear tantas clases como (numero de tipos de vista por numero de items).<- En este caso solo estan dos tipos de vista(con y sin miniatura) pero una tercer tipo de vista haria tener que crear otra clase más por cada tipo de item(de 9x2 a 9x3)

Recordemos que este patrón intenta que ambas,clase y superclase, puedan cambiar por separado,lo cual no sucede aqui por el acoplamiento.La mantenibilidad también está comprometida,ya que escalar se volverá complicado.

La clave está en utilizar la composición,para que la abstración tenga una implementación, haciendo un puente entre clase y superclase(ver imagen).Este puente entre clases parece que es una interfaz

NOTA: fijate que este patrón enlaza una clase abstracta con otra jerarquica tipo interface u otra abstracta mediante el bridge(inyectando en el constructor de la abstracta.

Veamoslo en código:

/* fichero de abstracciones.Esta clase abstracta sería la columna izquierda del puente */

export abstract class ListItemView {
  viewModel: IViewModel; // <- esta propiedad es el puente,la que lleve el puente debe ser sí o sí una clase abstracta/abstracción ya que necesitará un constructor para el puente

  constructor(viewModel: IViewModel){ <- en el constructor se inicializa la propiedad
    this.viewModel = viewModel;
  }

  render(): void { <- método a sobreescribir por polimorfismo(diría que incluso puede ser abstracto
    console.log('default abstract rendering');
  }
}

/* esto sería el pilar de la derecha, el implementator ,es decir ,la columna izquierda.Puede ser una interface pero también otra clase abstracta.Llevará lógica para las distintas views o layouts,en este caso para renderizar una imagen y el texto/

export interface IViewModel {
  title(): String; 
  image(): String;
}

Ahora cada clase tiene acceso mediante esa propiedad puente a la interfaz heredando de la abstracción:

export class WithThumbnailListItemView extends ListItemView {

  render() {
   console.log('-----------------------');
   console.log(`Here rendering amazing thumbnail: ${this.viewModel.image()}`)
   console.log(`${this.viewModel.title()}`);
  }
}

Y otra con sólo texto podría lucir asi:

export class JustTextListItemView extends ListItemView {
  render(): void {
    console.log('-----------------');
    console.log(`Just rendering text this one: ${this.viewModel.title()}`);
    console.log('-----------------');
  }
}

¿Y como són las clases que hereden de la interfaz ViewModel?:
Una podría ser para videos:
export class VideoViewModel implements IViewModel {
  video: any;

  constructor(video: any) {
    this.video = video;
  }

  title(): string {
    return `${this.video.title}`
  }
  
  image(): string {
    return `${this.video.image}`
  }

}
Y otra para Streams en directo:
export class StreamViewModel implements IViewModel {
stream: any; //<- stream deberia tener las propiedades necesarias

  constructor(stream: any) {
    this.stream = stream;
  }

  title(): string {
    return `(STREAM) ${this.stream.title} Currently Viewing ${this.stream.viewers}`
  }

  image(): string {
    return `(STREAM) ${this.stream.image}`;
  }
}

Bien,y como funciona todo esto?Imaginemos una base de datos que devuelve todo esto:
import { ListItemView } from "../abstracciones/ListItemView";
import { WithThumbnailListItemView } from "../concrecciones/WithThumbNailListItemView";
import { VideoViewModel } from '../concrecciones/VideoViewModel';
import { JustTextListItemView } from "../concrecciones/JustTextListItemView";
import { StreamViewModel } from '../concrecciones/StreamVideoViewModel';

export const content = [
  {
    type: "video",
    title: "Egoland 2: Tirando misiles",
    image: "Amazing image",
  },
  {
    type: "stream",
    title: "JUGANDO A POKEMON!, UNANSE!",
    image: "Amazing image",
    viewers: 10
  },
  {
    type: "stream",
    title: "SKYRIM LIVES OR NOT!",
    image: "Amazing image",
    viewers: 1
  },
  {
    type: "video",
    title: "Campanadas Ibai 2034",
    image: "Amazing image",
  },
  {
    type: "video",
    title: "Vegeta7777 muere",
    image: "Amazing image",
  },
];

const listViews: ListItemView[] = [];

for(let item of content){
  if(item.type==="video"){
    listViews.push( 
      Math.random() > 0.5 
      ? new WithThumbnailListItemView(new VideoViewModel(item))
      : new JustTextListItemView(new VideoViewModel(item))
    )
  }else if(item.type==="stream"){
    listViews.push(
      Math.random() > 0.5
      ? new WithThumbnailListItemView(new StreamViewModel(item))
      : new JustTextListItemView(new StreamViewModel(item))
    )
  }
}
/* fijate como todo dios es una instancia de ListItemView  y puede renderizar */
for(let view of listViews) {
  view.render()
}

